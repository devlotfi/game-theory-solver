/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SolverRouteImport } from './routes/solver/route'
import { Route as IndexImport } from './routes/index'
import { Route as SolverIndexImport } from './routes/solver/index'

// Create/Update Routes

const SolverRouteRoute = SolverRouteImport.update({
  id: '/solver',
  path: '/solver',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SolverIndexRoute = SolverIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SolverRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/solver': {
      id: '/solver'
      path: '/solver'
      fullPath: '/solver'
      preLoaderRoute: typeof SolverRouteImport
      parentRoute: typeof rootRoute
    }
    '/solver/': {
      id: '/solver/'
      path: '/'
      fullPath: '/solver/'
      preLoaderRoute: typeof SolverIndexImport
      parentRoute: typeof SolverRouteImport
    }
  }
}

// Create and export the route tree

interface SolverRouteRouteChildren {
  SolverIndexRoute: typeof SolverIndexRoute
}

const SolverRouteRouteChildren: SolverRouteRouteChildren = {
  SolverIndexRoute: SolverIndexRoute,
}

const SolverRouteRouteWithChildren = SolverRouteRoute._addFileChildren(
  SolverRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/solver': typeof SolverRouteRouteWithChildren
  '/solver/': typeof SolverIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/solver': typeof SolverIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/solver': typeof SolverRouteRouteWithChildren
  '/solver/': typeof SolverIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/solver' | '/solver/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/solver'
  id: '__root__' | '/' | '/solver' | '/solver/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SolverRouteRoute: typeof SolverRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SolverRouteRoute: SolverRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/solver"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/solver": {
      "filePath": "solver/route.tsx",
      "children": [
        "/solver/"
      ]
    },
    "/solver/": {
      "filePath": "solver/index.tsx",
      "parent": "/solver"
    }
  }
}
ROUTE_MANIFEST_END */
